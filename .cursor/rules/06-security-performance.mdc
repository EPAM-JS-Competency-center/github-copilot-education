---
description: Security and performance best practices
---

# Security & Performance Guidelines

## Security Best Practices

### Input Validation
- Always validate and sanitize user input
- Use proper type checking for request parameters
- Implement rate limiting for API endpoints
- Validate file uploads (type, size, content)

### Authentication & Authorization
- Implement proper session management
- Use secure password hashing (bcrypt)
- Implement CSRF protection
- Validate JWT tokens properly
- Use HTTPS in production

### Data Protection
- Never expose sensitive data in logs
- Use environment variables for secrets
- Implement proper error messages (no sensitive info)
- Sanitize data before database operations

## Performance Optimization

### Code Efficiency
- Use async/await properly to avoid blocking
- Implement proper error handling to prevent crashes
- Use early returns to reduce nesting
- Avoid memory leaks in event listeners

### Database Optimization
- Use proper indexing strategies
- Implement connection pooling
- Use prepared statements to prevent SQL injection
- Implement caching where appropriate

### Asset Optimization
- Minimize and compress CSS/JS files
- Use appropriate image formats (WebP when possible)
- Implement lazy loading for images
- Use CDN for static assets when possible

### Monitoring & Logging
- Log important events and errors
- Monitor response times and error rates
- Implement health check endpoints
- Use structured logging for better analysis

## Example Security Pattern
```typescript
const validateUserInput = (req: Request, res: Response, next: NextFunction) => {
  const { email, password } = req.body;
  
  if (!email || !isValidEmail(email)) {
    return res.status(400).json({ error: 'Invalid email format' });
  }
  
  if (!password || password.length < 8) {
    return res.status(400).json({ error: 'Password must be at least 8 characters' });
  }
  
  next();
};
```
